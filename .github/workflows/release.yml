name: Release VS Code extension

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag to build"
        required: true
        default: "main"
      publish:
        description: "Publish to VS Code Marketplace"
        required: true
        type: boolean
        default: true
      create_release:
        description: "Create GitHub Release and upload VSIX"
        required: true
        type: boolean
        default: true

concurrency:
  group: "release-${{ github.ref || github.event.inputs.ref }}"
  cancel-in-progress: true

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || '' }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # On tag pushes, enforce tag === package.json version.
      - name: Verify tag matches package.json version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Tag: $TAG  package.json version: $PKG_VERSION"
          if [ "v$PKG_VERSION" != "$TAG" ]; then
            echo "::error::Tag $TAG does not match package.json version v$PKG_VERSION"
            exit 1
          fi

      - name: Read package.json version
        id: pkg
        shell: bash
        run: |
          PKG_VERSION=$(node -p 'require("./package.json").version')
          echo "version=$PKG_VERSION" >> "$GITHUB_OUTPUT"

      - name: Build (compile)
        run: npm run compile

      - name: Package VSIX
        run: npx vsce package --no-yarn

      - name: Publish to VS Code Marketplace (vsce)
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true')
        env:
          VSCE_PAT: ${{ secrets.VSCE_TOKEN }}
        run: |
          if [ -z "$VSCE_PAT" ]; then
            echo "::warning::VSCE_TOKEN secret not set; skipping marketplace publish."
            exit 0
          fi
          VSIX="$(ls -1 *.vsix | head -n 1)"
          echo "Publishing $VSIX"
          npx vsce publish --packagePath "$VSIX"

      # Create release when triggered by tag push
      - name: Create GitHub Release (tag push)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: "*.vsix"
          fail_on_unmatched_files: true

      # Create (or update) release when run manually (makes a tag v<version> if needed)
      - name: Create GitHub Release (manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.pkg.outputs.version }}
          target_commitish: ${{ github.sha }}
          files: "*.vsix"
          fail_on_unmatched_files: true
